---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config
  namespace: {{ namespace }}
data:
  OZONE-SITE.XML_hdds.datanode.dir: /data/storage
  OZONE-SITE.XML_ozone.scm.datanode.id.dir: /data
  OZONE-SITE.XML_ozone.metadata.dirs: /data/metadata
  OZONE-SITE.XML_ozone.scm.block.client.address: scm-0.scm
  OZONE-SITE.XML_ozone.om.address: om-0.om
  OZONE-SITE.XML_ozone.scm.client.address: scm-0.scm
  OZONE-SITE.XML_ozone.scm.names: scm-0.scm
  LOG4J.PROPERTIES_log4j.rootLogger: INFO, stdout
  LOG4J.PROPERTIES_log4j.appender.stdout: org.apache.log4j.ConsoleAppender
  LOG4J.PROPERTIES_log4j.appender.stdout.layout: org.apache.log4j.PatternLayout
  LOG4J.PROPERTIES_log4j.appender.stdout.layout.ConversionPattern: '%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n'
  OZONE-SITE.XML_ozone.csi.s3g.address: http://s3g-0.s3g:9878
  OZONE-SITE.XML_ozone.csi.socket: /var/lib/csi/csi.sock
  OZONE-SITE.XML_ozone.csi.owner: hadoop
---
apiVersion: v1
kind: Service
metadata:
  name: datanode
  namespace: {{ namespace }}
spec:
  ports:
    - port: 9870
      name: rpc
  clusterIP: None
  selector:
    app: ozone
    component: datanode
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: datanode
  namespace: {{ namespace }}
  labels:
    app.kubernetes.io/component: ozone
spec:
  selector:
    matchLabels:
      app: ozone
      component: datanode
  serviceName: datanode
  replicas: {{ datanodeReplicas }}
  template:
    metadata:
      labels:
        app: ozone
        component: datanode
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9882"
        prometheus.io/path: /prom
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: component
                    operator: In
                    values:
                      - datanode
              topologyKey: kubernetes.io/hostname
      securityContext:
        fsGroup: 1000
      containers:
        - name: datanode
          image: 'mykidong/ozone:1.0.0'
          imagePullPolicy: Always
          args:
            - ozone
            - datanode
          envFrom:
            - configMapRef:
                name: config
          volumeMounts:
            - name: data
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ datanodeStorageSize }}Gi
        storageClassName: {{ storageClass }}
---
apiVersion: v1
kind: Service
metadata:
  name: om
  namespace: {{ namespace }}
spec:
  ports:
    - port: 9874
      name: ui
  clusterIP: None
  selector:
    app: ozone
    component: om
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: om
  namespace: {{ namespace }}
  labels:
    app.kubernetes.io/component: ozone
spec:
  selector:
    matchLabels:
      app: ozone
      component: om
  serviceName: om
  replicas: 1
  template:
    metadata:
      labels:
        app: ozone
        component: om
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9874"
        prometheus.io/path: /prom
    spec:
      securityContext:
        fsGroup: 1000
      containers:
        - name: om
          image: 'mykidong/ozone:1.0.0'
          imagePullPolicy: Always
          args:
            - ozone
            - om
          env:
            - name: WAITFOR
              value: scm-0.scm:9876
            - name: ENSURE_OM_INITIALIZED
              value: /data/metadata/om/current/VERSION
          livenessProbe:
            tcpSocket:
              port: 9862
            initialDelaySeconds: 30
          envFrom:
            - configMapRef:
                name: config
          volumeMounts:
            - name: data
              mountPath: /data
      volumes: []
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ omStorageSize }}Gi
        storageClassName: {{ storageClass }}
---
apiVersion: v1
kind: Service
metadata:
  name: s3g
  namespace: {{ namespace }}
spec:
  ports:
    - port: 9878
      name: rest
  clusterIP: None
  selector:
    app: ozone
    component: s3g
---
kind: Service
apiVersion: v1
metadata:
  name: s3g-service
  namespace: {{ namespace }}
spec:
  type: LoadBalancer
  selector:
    app: ozone
    component: s3g
  ports:
    - name: rest
      port: 9898
      protocol: TCP
      targetPort: 9878
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: s3g
  namespace: {{ namespace }}
  labels:
    app.kubernetes.io/component: ozone
spec:
  selector:
    matchLabels:
      app: ozone
      component: s3g
  serviceName: s3g
  replicas: 1
  template:
    metadata:
      labels:
        app: ozone
        component: s3g
    spec:
      containers:
        - name: s3g
          image: 'mykidong/ozone:1.0.0'
          imagePullPolicy: Always
          args:
            - ozone
            - s3g
          livenessProbe:
            httpGet:
              path: /
              port: 9878
            initialDelaySeconds: 30
          envFrom:
            - configMapRef:
                name: config
          volumeMounts:
            - name: data
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ s3gStorageSize }}Gi
        storageClassName: {{ storageClass }}
---
apiVersion: v1
kind: Service
metadata:
  name: scm
  namespace: {{ namespace }}
spec:
  ports:
    - port: 9876
      name: ui
  clusterIP: None
  selector:
    app: ozone
    component: scm
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: scm
  namespace: {{ namespace }}
  labels:
    app.kubernetes.io/component: ozone
spec:
  selector:
    matchLabels:
      app: ozone
      component: scm
  serviceName: scm
  replicas: 1
  template:
    metadata:
      labels:
        app: ozone
        component: scm
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9876"
        prometheus.io/path: /prom
    spec:
      securityContext:
        fsGroup: 1000
      initContainers:
        - name: init
          image: 'mykidong/ozone:1.0.0'
          args:
            - ozone
            - scm
            - --init
          envFrom:
            - configMapRef:
                name: config
          volumeMounts:
            - name: data
              mountPath: /data
      containers:
        - name: scm
          image: 'mykidong/ozone:1.0.0'
          imagePullPolicy: Always
          args:
            - ozone
            - scm
          livenessProbe:
            tcpSocket:
              port: 9861
            initialDelaySeconds: 30
          envFrom:
            - configMapRef:
                name: config
          volumeMounts:
            - name: data
              mountPath: /data
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ scmStorageSize }}Gi
        storageClassName: {{ storageClass }}
