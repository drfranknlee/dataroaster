---

- name: Copying minio env to profile
  template:
    src: "{{ playbook_dir }}/roles/{{ role_name }}/templates/{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0755
  with_items:
  - { src: '{{ minio_env_sh }}', dest: '/etc/profile.d/{{ minio_env_sh }}' }
  become: yes


- name: Creating minio directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ exec_user }}"
    mode: 0755
  with_items: "{{ minio_data_dirs }}"
  ignore_errors: true
  become: yes

- name: Creating cert directory
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ exec_user }}"
    mode: 0755
  with_items:
    - "/home/{{ exec_user }}/.minio/certs"
  ignore_errors: true
  become: yes

- name: Installing minio
  get_url:
    url: "https://dl.minio.io/server/minio/release/linux-amd64/minio"
    dest: "/usr/local/bin/minio"
    mode: 0755
  become: yes

- name: Creating minio home directory
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ exec_user }}"
    mode: 0755
  with_items:
    - "{{ minio_home_dir }}"
  ignore_errors: true
  become: yes


- name: Installing certbot
  shell: "{{ item }}"
  with_items:
    - "sudo yum install snapd -y"
    - "sudo systemctl enable --now snapd.socket"
    - "sudo ln -s /var/lib/snapd/snap /snap"
    - "sudo snap install core"
    - "sudo snap refresh core"
    - "sudo snap install core"
    - "sudo snap refresh core"
    - "sudo yum remove certbot -y"
    - "sudo snap install --classic certbot"
    - "sudo ln -s /snap/bin/certbot /usr/bin/certbot"
  ignore_errors: true
  become: yes

- name: Generating Certificate for Node 0
  shell: "{{ item }}"
  with_items:
    - "sudo certbot certonly --standalone -d {{ minio_node_0 }} --staple-ocsp -m mykidong@cloudchef-labs.com --agree-tos"
    - "sudo cp /etc/letsencrypt/live/$(sudo ls /etc/letsencrypt/live | grep {{ minio_node_0 }})/fullchain.pem /home/{{ exec_user }}/.minio/certs/{{ public_key_file }}"
    - "sudo cp /etc/letsencrypt/live/$(sudo ls /etc/letsencrypt/live | grep {{ minio_node_0 }})/privkey.pem /home/{{ exec_user }}/.minio/certs/{{ private_key_file }}"
    - "sudo chown {{ exec_user }}:{{ exec_user }} /home/{{ exec_user }}/.minio/certs/{{ public_key_file }}"
    - "sudo chown {{ exec_user }}:{{ exec_user }} /home/{{ exec_user }}/.minio/certs/{{ private_key_file }}"
  become: yes
  when: (inventory_hostname == hostvars[groups['minio-hosts'][0]]['inventory_hostname'])

- name: Generating Certificate for Node 1
  shell: "{{ item }}"
  with_items:
    - "sudo certbot certonly --standalone -d {{ minio_node_1 }} --staple-ocsp -m mykidong@cloudchef-labs.com --agree-tos"
    - "sudo cp /etc/letsencrypt/live/$(sudo ls /etc/letsencrypt/live | grep {{ minio_node_1 }})/fullchain.pem /home/{{ exec_user }}/.minio/certs/{{ public_key_file }}"
    - "sudo cp /etc/letsencrypt/live/$(sudo ls /etc/letsencrypt/live | grep {{ minio_node_1 }})/privkey.pem /home/{{ exec_user }}/.minio/certs/{{ private_key_file }}"
    - "sudo chown {{ exec_user }}:{{ exec_user }} /home/{{ exec_user }}/.minio/certs/{{ public_key_file }}"
    - "sudo chown {{ exec_user }}:{{ exec_user }} /home/{{ exec_user }}/.minio/certs/{{ private_key_file }}"
  become: yes
  when: (inventory_hostname == hostvars[groups['minio-hosts'][1]]['inventory_hostname'])

- name: Generating Certificate for Node 2
  shell: "{{ item }}"
  with_items:
    - "sudo certbot certonly --standalone -d {{ minio_node_2 }} --staple-ocsp -m mykidong@cloudchef-labs.com --agree-tos"
    - "sudo cp /etc/letsencrypt/live/$(sudo ls /etc/letsencrypt/live | grep {{ minio_node_2 }})/fullchain.pem /home/{{ exec_user }}/.minio/certs/{{ public_key_file }}"
    - "sudo cp /etc/letsencrypt/live/$(sudo ls /etc/letsencrypt/live | grep {{ minio_node_2 }})//privkey.pem /home/{{ exec_user }}/.minio/certs/{{ private_key_file }}"
    - "sudo chown {{ exec_user }}:{{ exec_user }} /home/{{ exec_user }}/.minio/certs/{{ public_key_file }}"
    - "sudo chown {{ exec_user }}:{{ exec_user }} /home/{{ exec_user }}/.minio/certs/{{ private_key_file }}"
  become: yes
  when: (inventory_hostname == hostvars[groups['minio-hosts'][2]]['inventory_hostname'])


- name: Starting Secure MinIO
  shell: "{{ item }}"
  args:
    chdir: "{{ minio_home_dir }}"
  with_items:
    - "nohup minio server --address \":443\" {{ minio_server_url }} >minio.log & echo $! > pid"
  become_user: "{{ exec_user }}"



  